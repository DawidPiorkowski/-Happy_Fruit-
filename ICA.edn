(ns delivery-system.core)

;; Define cities with initial values, capacities, and requirements
(def cities
  [{:name "Munich" :initial 500 :min-capacity 100 :max-capacity 500 :truck-count 2}
   {:name "Napoli" :initial 20 :min-capacity 70 :max-capacity 100 :truck-count 0}
   {:name "Innsbruck" :initial 50 :min-capacity 60 :max-capacity 150 :truck-count 0}
   {:name "Krakov" :initial 0 :min-capacity 80 :max-capacity 100 :truck-count 0}
   {:name "Hamburg" :initial 10 :min-capacity 20 :max-capacity 50 :truck-count 0}])

(def truck-capacity 100)

;; Helper functions to determine inventory status
(defn needs-inventory? [city]
  (< (:initial city) (:min-capacity city)))

(defn surplus-inventory? [city]
  (> (:initial city) (:min-capacity city)))

;; Find cities needing inventory and those with a surplus
(defn find-cities-with-needs []
  (let [needs (filter needs-inventory? cities)]
    (println "Cities that need inventory:" needs)
    needs))

(defn find-cities-with-surplus []
  (let [surplus (filter surplus-inventory? cities)]
    (println "Cities with surplus inventory:" surplus)
    surplus))

;; Generate a route from one city to another
(defn generate-route [source destination amount]
  {:from (:name source) :to (:name destination) :amount amount})

;; Plan routes from surplus cities to cities with needs
(defn plan-routes []
  (let [needs (find-cities-with-needs)
        surplus (find-cities-with-surplus)]
    (println "Planning routes between cities...")
    (reduce (fn [routes s]
              (reduce (fn [acc n]
                        (when (and (pos? (:truck-count s))
                                   (< (:initial n) (:min-capacity n)))
                          (let [needed-amount (- (:min-capacity n) (:initial n))
                                available-amount (- (:initial s) (:min-capacity s))
                                transfer-amount (min needed-amount available-amount truck-capacity)]
                            (when (pos? transfer-amount)
                              ;; Adjust the city inventories for tracking purposes
                              (swap! cities update-in [(first (filter #(= (:name %) (:name s)) cities)) :initial] #(- % transfer-amount))
                              (swap! cities update-in [(first (filter #(= (:name %) (:name n)) cities)) :initial] #(+ % transfer-amount))
                              (println "Route planned:" (generate-route s n transfer-amount))
                              (conj acc (generate-route s n transfer-amount))))))
                      routes needs))
            [] surplus)))

;; Display planned routes
(defn display-routes []
  (let [routes (plan-routes)]
    (if (empty? routes)
      (println "No routes planned - inventory levels may already meet minimum requirements.")
      (do
        (println "Truck Routes:")
        (doseq [route routes]
          (println (str "From " (:from route)
                        " to " (:to route)
                        " with " (:amount route) " units")))))))

;; Main function to run the program
(defn -main []
  (println "Starting Inventory Check and Route Planning")
  (display-routes))
